<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>http://www.skyshu.com/2018/08/02/defineProperty/</url>
      <content type="html"><![CDATA[<h1 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty()</a></h1><p><strong>作用</strong> 该方法会直接在一个对象上定义一个新属性, 或者修改一个对象的现有属性, 并返回这个对象。</p>
<p><strong>语法</strong> <code>Object.defineProperty(obj, prop, descriptor)</code></p>
<p><strong>参数</strong>  </p>
<p><code>obj</code>: 要在其上定义属性的对象。</p>
<p><code>prop</code>: 要定义或修改的属性的名称。</p>
<p><code>descriptor</code>: 将被定义或修改的属性描述符。</p>
<p><strong>属性描述符</strong> </p>
<p> 对象里目前存在的属性描述符有两种主要形式<strong>数据描述符</strong>和<strong>存取描述符</strong>。<strong>数据描述符</strong>是一个具有值的属性，该值可能是可写的，也可能不是可写的。<strong>存取描述符</strong>是由getter-setter函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。</p>
<p><strong>数据描述符和存取描述符均具</strong>有以下可选键值：</p>
<p><code>configurable</code><br>当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</p>
<p><code>enumerable</code> 当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。</p>
<p><strong>数据描述符同时具有以下可选键值</strong>:</p>
<p><code>value</code>  该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</p>
<p><code>writable</code> 当且仅当该属性的writable为true时，value才能被赋值运算符改变。默认为 false。</p>
<p><strong>存取描述符同时具有以下可选键值</strong></p>
<p><code>get</code>  一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。默认为 undefined。</p>
<p><code>set</code>  一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。默认为 undefined。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dasdasd]]></title>
      <url>http://www.skyshu.com/2018/06/18/macdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="macdown语法"><a href="#macdown语法" class="headerlink" title="macdown语法"></a>macdown语法</h1><p><img src="http://img5.imgtn.bdimg.com/it/u=1109917053,4211270766&amp;fm=27&amp;gp=0.jpg" alt="atr"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于GitHub和Hexo的博客环境搭建]]></title>
      <url>http://www.skyshu.com/2016/11/08/blog_bulid1/</url>
      <content type="html"><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.5, minimum-scale=1.2, user-scalable=yes">
    <title>博客搭建</title>
    <style media="screen">
    * {
      /* Basic CSS reset */
      margin:0;
      padding:0;
    }

    body {
      /* These styles have nothing to do with the ribbon */
      /*background:url(dark_wood.png) 0 0 repeat;*/
      /*background-color: black;*/
      padding:35px 0 0;
      /*margin:auto;*/
      text-align:center;

    }
    .stage1{
      background-image: url(http://img5.imgtn.bdimg.com/it/u=1128212989,2580336454&fm=21&gp=0.jpg);
      padding-bottom: 20px;

    }
    .ribbon {
      margin-left: 50px;
      margin-top: 30px;
      display:inline-block;
    }

    .ribbon:after, .ribbon:before {
      margin-top:0.5em;
      content: "";
      float:left;
      border:1.5em solid #fff;
    }

    .ribbon:after {
      border-right-color:transparent;
    }

    .ribbon:before {
      border-left-color:transparent;
    }

    .ribbon a:link, .ribbon a:visited {
      color:#000;
      text-decoration:none;
        float:left;
        height:3.5em;
      overflow:hidden;
    }

    .ribbon span {
      background:#fff;
      display:inline-block;
      line-height:3em;
      padding:0 1em;
      margin-top:0.5em;
      position:relative;

      -webkit-transition: background-color 0.2s, margin-top 0.2s;  /* Saf3.2+, Chrome */
      -moz-transition: background-color 0.2s, margin-top 0.2s;  /* FF4+ */
      -ms-transition: background-color 0.2s, margin-top 0.2s;  /* IE10 */
      -o-transition: background-color 0.2s, margin-top 0.2s;  /* Opera 10.5+ */
      transition: background-color 0.2s, margin-top 0.2s;
    }

    .ribbon a:hover span {
      background:#FFD204;
      margin-top:0;
    }

    .ribbon span:before {
      content: "";
      position:absolute;
      top:3em;
      left:0;
      border-right:0.5em solid #9B8651;
      border-bottom:0.5em solid #fff;
    }

    .ribbon span:after {
      content: "";
      position:absolute;
      top:3em;
      right:0;
      border-left:0.5em solid #9B8651;
      border-bottom:0.5em solid #fff;
    }
    .introduce,.Git,.Hexo,.deploy{
      /*width:700px;*/
      /*height: 1000px;*/

      margin: 10px 30px;
      border-radius: 40px;
      opacity: 1;
      box-shadow: 5px 5px 20px 6px black;
      padding: 20px;
    }
    .introduce{
      background-color: gray;
    }
    .Git{
      background-color: gray;
      display:none;
    }
    .Hexo{
      background-color: gray;
      display:none;
    }
    .deploy{
      background-color: gray;
      display:none;
    }
    p{
      text-align: left;
      text-indent: 30px;
      font-size: 20px;
      line-height: 40px;
      color: white;
      overflow: auto;
    }
    ul{
      text-align: left;
    }
    li{
      margin-left: 40px;
      font-size: 20px;
      color: white;
      line-height: 40px;
    }
    .deploy span{
      /*border: solid 1px black;*/
      margin: 0 auto;
      box-shadow: 10px 5px 10px 2px black;
      background-color: #FFF8DC;
      padding: 5px;
      color: black;
      text-indent: 0px;
      display: inline-block;
      border-radius: 10px;
      font-size: 15px;
    }
    img{
       /*width: 200px;*/
      display: block;
      margin-top: 20px;
    }
    </style>
  </head>
  <body>
    <div class="stage1">
      <div class="ribbon">
        <a href="#" class="inA"><span>简介</span></a>
        <a href="#" class="gitA"><span>Git</span></a>
        <a href="#" class="HexoA"><span>Hexo</span></a>
        <a href="#" class="deployA"><span>配置</span></a>
      </div>
      <div class="introduce">
        <h3>简介</h3>
         <p>
           本文将介绍如何使用Hexo+Github Page搭建个人博客的全部过程。搭建流程如下：
         </p>
         <ul>
           <li>注册Github账号</li>
           <li>安装Homebrew</li>
           <li>安装Node.js</li>
           <li>安装Git</li>
           <li>配置SSH Keys</li>
           <li>建立github仓库</li>
           <li>安装Hexo</li>
           <li>同步Hexo博客到GitHub</li>
           <li>Hexo的主题配置</li>
           <li>注册域名</li>
           <li>DNS解析域名</li>
           <li>将独立域名与GitHub Pages的空间绑定</li>
           <li>通过Markdown进行文章的编写</li>
         </ul>
      </div>
      <div class="Git">
        <h3>Git</h3>
         <p>
           Git是一款免费、开源的分布式版本控制系统。
           版本控制是一种软件工程技巧，可以在开发的过程中，确保由不同人所编写的同一档案都得到更新。<br>
           <a href="http://blog.csdn.net/haohan_meng/article/details/19010511" target="_blank">版本控制系统介绍</a><br>
           版本控制系统分为集中式(CVCS)和分布式(DVCS)<br>
           集中式：代表SVN，此类系统有一个单一的集中管理的服务器（中央服务器），用于存储管理所有文件的修订版本。协同工作者都是通过客户端连接到这台服务器，获取到最新的文件或者提交更新文件。缺点：必须联网才能工作，当中央服务器发生故障时将无法工作。<br>
           分布式：代表Git，此类系统没有中央服务器的，每个工作者的电脑都是一个完整的版本库，工作的时候也无网络需求，因为文件的每个版本都可以存储在自己的电脑上。工作者协同工作可通过相互推送的方式实现。如：自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自修改的文件推送给对方，就可以互相看到对方修改的文件了。<br>
           Git与GitHub的区别:<br>
           Git是一个版本控制的工具，而Github有点类似于远程仓库，用于存放git管理的各种项目。<br>
           Github Pages可以被认为是用户编写的、托管在github上的静态网页。GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定(300M)，适合进行博客的搭建。
         </p>
      </div>
      <div class="Hexo">
        <h3>Hexo</h3>
          <p>
            Node.js是一个运行在服务器端的框架，作为JavaScript的运行环境(runtime)。它是对Google V8引擎进行了封装，即底层所使用的是V8引擎。用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动，非阻塞I/O模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。<br>
            npm是Node.js的包管理工具 (package manager)。
            在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家把自己开发的模块放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪里，应该从哪下载。npm究竟字在哪？npm在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，可查看到版本信息。<br>
            Hexo是一个快速、简洁且高效的博客框架。可用于生成各种靓丽的主题(可以从Hexo的官网下载，也可以使用用html文档自定义主题)。并使用Markdown编辑器可进行博文编写操作。要使用Hexo，需要先在系统中支持Nodejs以及Git。
          </p>
      </div>
      <div class="deploy">
         <!-- 本文配置是针对Mac系统进行的相关说明 -->
         <h3>配置</h3>
         <p>
           1.注册GitHub账号<br>
           访问：http://www.github.com/，注册你的username和邮箱，邮箱十分重要，GitHub上很多通知都是通过邮箱的。比如你的主页上传并构建成功会通过邮箱通知，更重要的是，如果构建失败的话也会在邮件中说明原因。
         </p>
         <p>
           2.安装Homebrew<br>
           HomeBrew简称brew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或卸载软件。<br>
           <a href="http://brew.sh/index_zh-cn.html" target="_blank">Homebrew官网</a><br>
           安装HomeBrew, 只需在终端输入如下命令<br>
           <span>$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br>
           安装完成后,可在终端输出brew命令，如果在终端显示如下提示，则表示安装成功。
           <img src="http://ww4.sinaimg.cn/mw690/005uY5V3gw1f9mqkz6wrcj30fv0913z7.jpg" alt="">
         </p>
         <p>
           3.安装Node.js <br>
           可在网上直接下载一键安装，也可以使用homebrew来安装。打开终端, 输入以下命令:<br>
           <span>$ brew install node</span><br>
           即可安装Node.js, 安装成功后即可使用npm命令了。
         </p>
         <p>
           4.安装Git <br>
           在terminal终端，输入以下命令:<br>
           <span>$ brew install node</span><br>
           注意：若出现安装不变成功的情况，Mac系统安装git可能需要集成xcode，通过xcode对git进行安装。安装方式如下：
           运行Xcode后，选择菜单“Xcode”->“Preference”, 在弹出的窗口中找到"Downloads"，选择"Command Line Tools" 项并点击“下载”图标即可完成安装。如果已经完成安装，该选项"Command Line Tools"将不会存在。如下图所示：
           <img src="http://ww4.sinaimg.cn/mw690/005uY5V3gw1f9mql2rmj5j30kq0f6412.jpg" alt="">
         </p>

         <p>
           5.配置SSH Keys
           SSH key提供了一种与GitHub通信的方式，通过这种方式，能够在不输入密码的情况下，将Github作为自己的remote端服务器，进行版本控制。 <br>
           配置SSH keys的主要目的是让本地git项目和远程github建立联系。 <br>
           5.1 检查SSH key <br>
           通过终端查找是否存在ssh keys,在终端输入如下命令:(用于打开.ssh文件) <br>
           <span> $ cd ~/.ssh #检查本机的ssh密钥</span> <br>
           如果提示: No such file or directory （未找到该文件或目录）说明你是第一次使用git <br>
           5.2 生成新的SSH keys <br>
           在终端执行如下命令: <br>
           <span>
             $ ssh-keygen -t rsa -C "邮件地址@youremail.com" <br>
             Generating public/private rsa key pair. <br>
             Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>
          </回车就好></span> <br>
             邮箱地址使用注册GitHub账号所用邮箱 <br>
             之后系统会提示你输入密码 <br>
             <span>
               Enter passphrase (empty for no passphrase):<输入加密串> <br>
               Enter same passphrase again:<再次输入加密串>
            </再次输入加密串></输入加密串></span> <br>
            在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。(另外密码不会以'*'样式显示，直接输入就可以) <br>
            之后看到如下的界面，说明设置ssh key成功了。
            <img src="http://ww2.sinaimg.cn/mw690/005uY5V3gw1f9mql3jintj30gb0bkgmw.jpg" alt="">
            5.3 添加SSH Key 到GitHub
            在本机设置SSH Key之后，需要添加到GitHub上，这样才能建立起联系。 <br>
            打开finder,按住shift+command+g跳出前往文件夹,输入 ~/.ssh, 进入.ssh文件夹。 <br>
            由于.ssh是隐藏文件,mac系统默认不显示隐藏文件,可在终端输入如下命令:  <br>
            <span>
              $ defaults write com.apple.finder AppleShowAllFiles -bool true #此命令显示隐藏文件  <br>
              $ defaults write com.apple.finder AppleShowAllFiles -bool false #此命令关闭显示隐藏文件
            </span> <br>
            .ssh文件里有两个文件,分别是id_rsa和id_rsa.pub,使用文本文件打开id_rsa.pub,拷贝里面的内容。 <br>
            也可以不用进入文件夹，在终端直接输入如下命令: <br>
            <span>pbcopy < ~/.ssh/id_rsa.pub  #拷贝SSH key</span>  <br>
            5.4 在Github设置SSH key <br>
            登录GitHub 账号, “Settings”-> SSH keys-> Add SSH key -> 起名(Title) 与 粘贴key(Key)
            <img src="http://ww3.sinaimg.cn/mw690/005uY5V3gw1f9mql441hvj307809v752.jpg" alt=""> <br>
            <img src="http://ww1.sinaimg.cn/mw690/005uY5V3gw1f9mql4u6k2j306g0buwez.jpg" alt="">
            新建一个SSH key
            <img src="http://ww1.sinaimg.cn/mw690/005uY5V3gw1f9mql4lt1rj307y05t0sr.jpg" alt=""> <br>
            <img src="http://ww3.sinaimg.cn/mw690/005uY5V3gw1f9mql5f10sj30ai0b5js6.jpg" alt="">
            创建成功后，发现现在的Github上的SSH keys是灰色的
            <img src="http://ww2.sinaimg.cn/mw690/005uY5V3gw1f9mql6gdn2j30gu04u75d.jpg" alt="">
            在终端执行命令ssh -T git@github.com后，刷新网页会看到灰色点变成了绿色。
            <img src="http://ww1.sinaimg.cn/mw690/005uY5V3gw1f9mql7dd03j30hp054jso.jpg" alt="">
            这样就完成了Github里的SSH keys设置。
         </p>
         <p>
           6.GitHub建立仓库
           登录github,点击左上角的"+"按钮,在出现的下拉菜单中点击New repository,创建一个新的仓库,如图所示:
           <img src="http://ww2.sinaimg.cn/mw690/005uY5V3gw1f9mql7txfrj307004xq35.jpg" alt="">
           之后会出现如下界面:
           <img src="http://ww3.sinaimg.cn/mw690/005uY5V3gw1f9mql89k4vj30gz0etju6.jpg" alt="">
           注意：Github Pages的Repository名字是特定的，比如我Github账号是daydayhu，那么我Github Pages Repository名字就是daydayhu.github.io <br>
         </p>
         <p>
           7.安装Hexo
             安装Hexo通过使用nmp（Node.js的包管理工具），在终端输入以下命令： <br>
             <span>npm install -g hexo</span>  <br>
             过一段时间，Hexo会自动完成下载安装。Hexo安装完成之后，可选择一个位置创建一个文件夹，这个文件夹将做为以后你存放本地博客的地方，通过cd filepath(filepath替换成你创建的文件夹目录)命令，进入到你创建的文件夹目录，然后执行以下命令： <br>
             <span>
               hexo init <br>
               npm install
             </span> <br>
             这样Hexo会在该文件夹创建本地博客所需的一切资源。这样本地博客就搭建好了，输入以下命令： <br>
             <span>
               hexo g  // 全拼是：hexo generate，可以简写成 hexo g  <br>
               hexo s  // 全拼是：hexo server，可以简写成 hexo s
             </span>  <br>
             这样就开启了一个本地博客服务器，打开浏览器，在地址栏输入localhost:4000，就可以查看本地博客了，hexo默认生成了一片hello world博客。注意，以上hexo开头的命令，执行目录必须是你创建的博客文件夹目录。 <br>
         </p>
         <p>
           8.同步Hexo博客到Github <br>
           现在你已经可以在本机查看你的博客了，但是要想让别人通过网络可以查看你的博客，还需要一步，那就是将你的博客发布到github仓库。在terminal终端，将当前目录切换到你的本地博客目录，执行以下命令： <br>
           <span>npm install hexo-deployer-git  #可简写为 hexo d -g</span> <br>
           安装完成之后，打开本地博客目录的_config.yml文件，编辑其中的deploy节点： <br>
           <span>
             deploy: <br>
             type: git <br>
             repo: git@github.com:yourusername/youusername.github.io.git <br>
             branch: master
           </span>  <br>
           将上面yourusername替换成你的github用户名即可  <br>
           保存配置之后，在本地博客目录执行以下命令 <br>
           <span>
             hexo clean  // clean本地项目，防止缓存  <br>
             hexo g      // 根据你编辑的md格式的博客，生成静态网页  <br>
             hexo d      // 将本地博客发布到github  <br>
           </span>  <br>
           然后，在浏览器地址栏输入yourusername.github.io就可以访问你的博客了，别人也可以通过这个地址访问你的博客。
         </p>
         <p>
           9.Hexo的主题配置
           Hexo本身自带的主题是languages主题，一个相对较为简约的主题。可从Hexo官网选择合适主题。点击 <a href="https://hexo.io/themes/" ,="" target="_blank">Hexo</a>可进行主题样式查看。下面就NexT主题安装进行配置 <br>
           在终端下，定位到Hexo 站点目录下。使用 Git checkout 代码，输入如下命令： <br>
           <span>
             $ cd your-hexo-site <br>
             $ git clone https://github.com/iissnan/hexo-theme-next themes/next
           </span><br>
           修改你的博客根目录下的config.yml配置文件中的theme属性，将其设置为NexT。在终端输入如下命令进行更新。 <br>
           <span>
             cd themes/next <br>
             git pull
          </span> <br>
          请先备份你的_config.yml文件后再升级。更新好后，本地启动起来效果。之后再终端输入如下命令，进行本地查看。 <br>
          <span>hexo server -g  #生成加预览</span> <br>
          hexo 文目录如下： <br>
          <span>
            ├── _config.yml <br>
            ├── package.json <br>
            ├── scaffolds <br>
            ├── source <br>
            |  ├── _drafts <br>
            |  └── _posts <br>
            └── themes <br>
          </span> <br>
          _config.yml:网站的配置信息，您以在此配置大部分的参数。<br>
          package.json:应用程序的信息。<br>
          scaffolds:模版文件夹。当您新建文章时，Hexo会根据scaffold 来建立文件。<br>
          source:资源文件夹是存放用户资源的地方。除posts文件夹之外，开头命名为(下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。<br>
          themes:主题 文件夹。Hexo会根据主题来生成静态页面。<br>
          hexo的_config.yml配置 <br>
          可以在hexo安装文件目录下的_config.yml中修改大部份的配置, 具体如下参考： <br>
          <span class="hexo_config.yml">
            # Hexo Configuration <br>
            ## Docs: https://hexo.io/docs/configuration.html <br>
            ## Source: https://github.com/hexojs/hexo/ <br>

            # Site  网站 <br>
            title: DDB Space	#网站标题 <br>
            subtitle: 另外半只脚印		#网站副标题 <br>
            description: 记录，为遗忘的过去		#网站描述 <br>
            author: Hu tianshu	#网站作者 <br>
            language: zh-Hans	#网站使用的语言 <br>
            timezone:	 #网站时区。Hexo 默认使用您电脑的时区 <br>

            # URL 网址 <br>
            ## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 <br> http://yoursite.com/blog 并把 root 设为 /blog/。 <br>
            ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/' <br>
            url: http://yoursite.com <br>
            root: / <br>
            permalink: :year/:month/:day/:title/ <br>
            permalink_defaults: <br>

            # Directory	目录配置 <br>
            source_dir: source  #源文件夹，这个文件夹用来存放内容。 <br>
            public_dir: public  #公共文件夹，这个文件夹用于存放生成的站点文件。 <br>
            tag_dir: tags		#标签文件夹 <br>
            archive_dir: archives	 	#归档文件夹 <br>
            category_dir: categories	#分类文件夹 <br>
            code_dir: downloads/code 	#nclude code 文件夹 <br>
            i18n_dir: :lang   #国际化（i18n）文件夹 <br>
            skip_render:	 #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 <br>

            # Writing	文章 <br>
            new_post_name: :title.md 	#File name of new posts  新建文章默认文件名 <br>
            default_layout: post  	#默认布局 <br>
            titlecase: false 		#Transform title into titlecase <br>
            external_link: true 	#Open external links in new tab  在新标签中打开一个外部链接，默认为true <br>
            filename_case: 0  	<br>	#转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。 <br>
            render_drafts: false  	#是否渲染_drafts目录下的文章，默认为false <br>
            post_asset_folder: false  	#启动 Asset 文件夹 <br>
            relative_link: false  		#把链接改为与根目录的相对位址，默认false <br>
            future: true  	#显示未来的文章，默认false <br>
            highlight:   	#代码块的设置 <br>
              enable: true <br>
              line_number: true <br>
              auto_detect: false <br>
              tab_replace: <br>

            # Category & tag 分类和标签的设置 <br>
            default_category: uncategorized  #默认分类 <br>
            category_map:  #分类别名 <br>
            tag_map:  #标签别名 <br>

            # Date / Time format <br>
            ## Hexo uses Moment.js to parse and display date <br>
            ## You can customize the date format as defined in <br>
            ## http://momentjs.com/docs/#/displaying/format/ <br>
            date_format: YYYY-MM-DD <br>
            time_format: HH:mm:ss <br>

            # Pagination  分页 <br>
            ## Set per_page to 0 to disable pagination <br>
            per_page: 10	#每页显示的文章量 (0 = 关闭分页功能) <br>
            pagination_dir: page  #分页目录 <br>

            # Extensions <br>
            ## Plugins: https://hexo.io/plugins/ <br>
            ## Themes: https://hexo.io/themes/ <br>
            theme: next <br>

            # Deployment <br>
            ## Docs: https://hexo.io/docs/deployment.html <br>
            deploy: <br>
              type: git <br>
              repository: https://github.com/daydayhu/daydayhu.github.io.git <br>
              branch: master <br>
          </span>
          在主题的_config.yml里也可进行主题样式的配置，可参考 <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank">next主题的设置</a> <br>
         </p>
         <p>
           10.注册域名 <br>
           这里使用 <a href="https://wanwang.aliyun.com" target="_blank" rel="external">万网</a>
         </p>
         <p>
           11.DNS(域名系统)解析域名 <br>
           DNS作用: 将域名解析成某个IP地址后，访问所指向的服务器获取资源。 <br>
           以万网为例，具体操作如下所示 <br>
           注册域名成功之后，登入自己的阿里云，在管理控制台选中域名 <br>
           <img src="http://ww4.sinaimg.cn/mw690/005uY5V3gw1f9rxf92j73j30gm0d040e.jpg" alt="">  <br>
           进入之后，找到自己所需要解析的域名，点击解析 <br>
           <img src="http://ww2.sinaimg.cn/mw690/005uY5V3gw1f9rxf9fcowj30qa03u0tc.jpg" alt="">  <br>
           进入到解析界面，添加解析 <br>
           <img src="http://ww2.sinaimg.cn/mw690/005uY5V3gw1f9rxf9xkqej30fa0ccdhb.jpg" alt="">  <br>
           会显示如下所示的弹窗 <br>
           <img src="http://ww1.sinaimg.cn/mw690/005uY5V3gw1f9rxfaju3jj30pv0cm434.jpg" alt="">  <br>
           记录类型：可选A记录或者CNAME记录。 <br>
           A记录（若需要将域名指向一个ip地址，选择添加A记录) <br>
           CNAME记录（如果需要将域名指向另一个域名，再由另一个域名提供ip地址，就需要添加CNAME记录）<br>
           主机记录：填子域名（比如需要添加www.123.com的解析，只需要在主机记录处填写www即可；如果只想添加123.com的解析，主机记录直接留空，系统会自动填一个“@”到输入框）。 <br>
           线路类型:（默认为必填项，否则会导致部分用户无法解析；在上图中，默认的作用为：除了联通用户之外的所有用户，都会指向1.1.1.1）。 <br>
           记录值: 为ip地址。  当选用A记录时，此处填写github Pages的提供的IP地址，默认为如下两个: <br>
           192.30.252.153 <br>
           192.30.252.154 <br>
           如博客不能登录，有可能是github更改了空间服务的ip地址，记得及时到在GitHub Pages查看最新的ip即可。 <br>
           当选用CNAME记录时， 此处填写你的Github Pages Repository所绑定的域名。如我的是daydayhu.github.io <br>
           MX优先级: 不需要填写。 <br>
           TTL: 不需要填写，添加时系统会自动生成，默认为600秒（TTL为缓存时间，数值越小，修改记录各地生效时间越快）。它值的平均值，四舍五入取整数。 <br>
           添加完成之后解析即可，大概需要等待几分钟 <br>
         </p>
         <p>
           12.将独立域名与GitHub Pages的空间绑定 <br>
           方法推荐使用 <br>
           在你存放博客文件夹中的source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如http://xxxx.com，注意前面没有http://，也没有www，然后使用hexo g && hexo d上传部署。 <br>
           之后稍等几分钟就可以通过你的独立域名访问自己的博客了 <br>
         </p>
         <p>
           13.编写博客
         </p>
      </div>
    </div>
  <script type="text/javascript">
    var inA = document.getElementsByClassName('inA')[0];
      inA.onclick = function () {
            var introduce = document.getElementsByClassName('introduce')[0];
            introduce.style.display = "block";
            var Git = document.getElementsByClassName('Git')[0];
            Git.style.display = "none";
            var Hexo = document.getElementsByClassName('Hexo')[0];
            Hexo.style.display = "none";
            var deploy = document.getElementsByClassName('deploy')[0];
            deploy.style.display = "none";
    }
    var gitA = document.getElementsByClassName('gitA')[0];
      gitA.onclick = function () {
            var Git = document.getElementsByClassName('Git')[0];
            Git.style.display = "block";
            var introduce = document.getElementsByClassName('introduce')[0];
            introduce.style.display = "none";
            var deploy = document.getElementsByClassName('deploy')[0];
            deploy.style.display = "none";
            var Hexo = document.getElementsByClassName('Hexo')[0];
            Hexo.style.display = "none";

    }
    var HexoA = document.getElementsByClassName('HexoA')[0];
      HexoA.onclick = function () {
            var Hexo = document.getElementsByClassName('Hexo')[0];
            Hexo.style.display = "block";
            var Git = document.getElementsByClassName('Git')[0];
            Git.style.display = "none";
            var introduce = document.getElementsByClassName('introduce')[0];
            introduce.style.display = "none";
            var deploy = document.getElementsByClassName('deploy')[0];
            deploy.style.display = "none";

    }
    var deployA = document.getElementsByClassName('deployA')[0];
      deployA.onclick = function () {
            var deploy = document.getElementsByClassName('deploy')[0];
            deploy.style.display = "block";
            var Hexo = document.getElementsByClassName('Hexo')[0];
            Hexo.style.display = "none";
            var Git = document.getElementsByClassName('Git')[0];
            Git.style.display = "none";
            var introduce = document.getElementsByClassName('introduce')[0];
            introduce.style.display = "none";
    }
  </script>

  </body>
</html>
]]></content>
    </entry>
    
  
  
</search>
